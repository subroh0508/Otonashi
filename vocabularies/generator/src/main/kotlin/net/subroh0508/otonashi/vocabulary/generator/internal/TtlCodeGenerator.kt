package net.subroh0508.otonashi.vocabulary.generator.internal

import java.io.File

class TtlCodeGenerator(
    private val parentDir: File,
    private val classNamePrefix: String,
    private val packageName: String
) {
    fun execute(rawText: String): List<File> {
        val lines = rawText.split("\n").filter { it.matchQuery() }

        if (lines.isEmpty()) {
            return emptyList()
        }

        val iriPrefix = lines[0].split(":")[0]

        return lines.fold(
            mutableMapOf(
                RdfType.CLASS to mutableListOf<String>(),
                RdfType.PROPERTY to mutableListOf<String>()
            )
        ) { acc, line ->
            val type = RdfType.fromRawText(line) ?: return@fold acc
            val matchResult = PATTERN.find(line) ?: return@fold acc

            println(matchResult.groupValues)
            acc[type]?.add(matchResult.groupValues[1].replace("$iriPrefix:", ""))

            acc
        }.map { (type, attributes) ->
            val code = buildCode(type, iriPrefix, attributes)

            File(parentDir, "${type.className(classNamePrefix)}.kt").apply { writeText(code) }
        }
    }

    private fun buildCode(type: RdfType, iriPrefix: String, attributes: List<String>) = buildString {
        append("package $packageName\n")
        append("\n")
        append("import net.subroh0508.otonashi.triples.vocabulary.IriVocabulary\n")
        append("\n")
        append(COMMENT)
        append("\n")
        append("object ${type.className(classNamePrefix)} : IriVocabulary(\n")
        append("    \"$iriPrefix\",\n")
        attributes.chunked(10).forEach { chunked ->
            append("    ${chunked.joinToString(", ") { "\"$it\"" }}\n")
        }
        append(") {\n")
        attributes.forEach { attr ->
            append("    val ${attr.decapitalize()} by store\n")
        }
        append("}\n")
    }

    private fun String.matchQuery() = matches(PATTERN)

    companion object {
        private val PATTERN = """^([^<>"\s{}|\\^`]+:[^<>"\s{}|\\^`]+).*a.*([^<>"\s{}|\\^`]+:[^<>"\s{}|\\^`]+)*.*$""".toRegex()
        private val COMMENT = """
            /*
             * This file was auto generated by otonashi-vocabularies-generator plugin
             *
             */
        """.trimIndent()
    }
}