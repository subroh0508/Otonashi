package net.subroh0508.otonashi.vocabulary.generator.internal

import java.io.File

internal class IriEnumGenerator(
    private val parentDir: File,
    private val enumNamePrefix: String,
    private val packageName: String
) {
    fun execute(prefixes: List<Pair<String, String>>): File {
        val code = buildCode(prefixes)

        return File(parentDir, "${enumNamePrefix}Prefix.kt").apply { writeText(code) }
    }

    private fun buildCode(prefixes: List<Pair<String, String>>) = buildString {
        append("package $packageName\n")
        append("\n")
        append("import net.subroh0508.otonashi.triples.Prefix\n")
        append("\n")
        append(COMMENT)
        append("\n")
        append("enum class ${enumNamePrefix}Prefix(\n")
        append("    override val prefix: String,\n")
        append("    override val iri: String\n")
        append(") : Prefix {\n")
        prefixes.forEachIndexed { i, (prefixName, iri) ->
            val tail = if (i == prefixes.size - 1) ";" else ","

            append("    ${prefixName.toUpperCase()}(\"$prefixName\", \"$iri\")$tail\n")
        }
        append("\n")
        append("    override fun toString() = \"PREFIX \$prefix: \$iri\"\n")
        append("}\n")
    }

    companion object {
        private val COMMENT = """
            /*
             * This file was auto generated by otonashi-vocabularies-generator plugin
             *
             */

        """.trimIndent()
    }
}